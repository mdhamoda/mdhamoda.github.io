export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "CarrierDispatchService",
        "fileName": "CarrierDispatchService.html",
        "text": "CarrierDispatchService : **Key Features:** - Validates and dispatches a single shipment request marked 'Ready for Dispatch'. - Sends JSON payloads to a carrier API using a Named Credential. - Updates ShipmentRequest__c  status based on success/failure from API response. - Queries Org B to retrieve dispatched shipment statuses using SOQL callout. **Named Credential Used:** - NCCarrierAPICredential  ‚Ä¢ POST endpoint: /apexrest/CarrierAPI  ‚Ä¢ GET endpoint: /data/v62.0/query?q=...  **Sample JSON Payload(Dispatch Request):**  `json { \"shipmentRequest\": [ { \"ShipmentRequestId\": \"a01xx0000001234\", \"Name\": \"SR-00001\", \"Origin\": \"New York\", \"Region\": \"East\", \"Carrier\": \"DHL\", \"TrackingID\": \"TRK123456\", \"EstimatedDelivery\": \"2025-07-01\" } ] }  ` **Sample JSON Response(Dispatch API):**  `json [ { \"ShipmentRequestId\": \"a01xx0000001234\", \"Name\": \"SR-00001\", \"Status\": \"Dispatched\", \"RequestStatus\": \"Success\", \"Message\": \"Shipment successfully dispatched.\" } ]  ` **Use Case Scenarios:** - ‚úÖ Successful dispatch of one shipment. - ‚úÖ Successful update of dispatched shipment. - ‚ùå Error if no shipment found or status is incorrect. - ‚ùå Error if more than one shipment ID provided. - ‚ùå Dispatch failure due to HTTP/network error. - ‚ùå Carrier returns failure response ‚Äî shipment is marked accordingly. Signature public with sharing class CarrierDispatchService Authors : Manigandan Dhamodaran, : Manigandan Dhamodaran CarrierDispatchService Methods dispatchShipments(shipmentRequestIds) Dispatches a single ShipmentRequest__c  record by sending a POST request to the carrier API. The shipment must be in 'Ready for Dispatch' status to proceed. updateShipmentStatus() Updates local ShipmentRequest__c  records by querying Org B to determine if shipments have been dispatched. Uses a SOQL query via GET callout and updates status to 'Dispatched' if matched. dispatchShipments(shipmentRequestIds) Dispatches a single ShipmentRequest__c  record by sending a POST request to the carrier API. The shipment must be in 'Ready for Dispatch' status to proceed. Signature @AuraEnabled public static DispatchResultWrapper dispatchShipments(List<Id> shipmentRequestIds) Parameters shipmentRequestIds Type: List<Id> A list of one ShipmentRequest Id to be dispatched. Returns DispatchResultWrapper - Status: 'Success' or 'Error' - Message: Human-readable message explaining the result Example DispatchResultWrapper result = CarrierDispatchService.dispatchShipments(new List<Id>{'a01xx0000001234'}); updateShipmentStatus() Updates local ShipmentRequest__c  records by querying Org B to determine if shipments have been dispatched. Uses a SOQL query via GET callout and updates status to 'Dispatched' if matched. Signature public static void updateShipmentStatus(List <ShipmentRequest__c> shipmentRequests) Parameters shipmentRequests List of ShipmentRequest__c records whose status needs to be synced. Returns void Example CarrierDispatchService.updateShipmentStatus([   new ShipmentRequest__c(Id = 'a01xx0000001234')]); CarrierDispatchService.CarrierRequestWrapper Signature public class CarrierRequestWrapper CarrierDispatchService.CarrierRequestWrapper Properties Name Signature Carrier public String Carrier EstimatedDelivery public Date EstimatedDelivery Name public String Name Origin public String Origin Region public String Region ShipmentRequestId public String ShipmentRequestId TrackingID public String TrackingID CarrierDispatchService.CarrierResponseWrapper Signature public class CarrierResponseWrapper CarrierDispatchService.CarrierResponseWrapper Properties Name Signature Message public String Message Name public String Name RequestStatus public String RequestStatus ShipmentRequestId public String ShipmentRequestId Status public String Status CarrierDispatchService.DispatchResultWrapper Signature public class DispatchResultWrapper CarrierDispatchService.DispatchResultWrapper Properties Name Signature Annotations Message public String Message @AuraEnabled Status public String Status @AuraEnabled"
    },
    {
        "title": "CarrierDispatchServiceTest",
        "fileName": "CarrierDispatchServiceTest.html",
        "text": "CarrierDispatchServiceTest : Signature @isTest public class CarrierDispatchServiceTest Author : Manigandan Dhamodaran CarrierDispatchServiceTest Methods setupData() testDispatchShipments_ErrorStatus() testDispatchShipments_FailedResponse() testDispatchShipments_multipleRecords() testDispatchShipments_noEligibleRecords() testDispatchShipments_success() testUpdateShipmentStatus() setupData() Signature @testSetup static void setupData() testDispatchShipments_ErrorStatus() Signature @isTest static void testDispatchShipments_ErrorStatus() testDispatchShipments_FailedResponse() Signature @isTest static void testDispatchShipments_FailedResponse() testDispatchShipments_multipleRecords() Signature @isTest static void testDispatchShipments_multipleRecords() testDispatchShipments_noEligibleRecords() Signature @isTest static void testDispatchShipments_noEligibleRecords() testDispatchShipments_success() Signature @isTest static void testDispatchShipments_success() testUpdateShipmentStatus() Signature @isTest static void testUpdateShipmentStatus() CarrierDispatchServiceTest.MockHttpResponseGenerator Signature public class MockHttpResponseGenerator implements HttpCalloutMock CarrierDispatchServiceTest.MockHttpResponseGenerator Properties Name Signature apiSpec public String apiSpec recordId public String recordId unitTestSpec public String unitTestSpec CarrierDispatchServiceTest.MockHttpResponseGenerator Constructors MockHttpResponseGenerator(recordId, apiSpec, unitTestSpec) MockHttpResponseGenerator(recordId, apiSpec, unitTestSpec) Signature public MockHttpResponseGenerator(String recordId, String apiSpec, String unitTestSpec) CarrierDispatchServiceTest.MockHttpResponseGenerator Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "ShipmentRequestController",
        "fileName": "ShipmentRequestController.html",
        "text": "ShipmentRequestController Controller class to manage and interact with ShipmentRequest__c  records. Supports retrieval of shipments by region, updates from UI, and publishing platform events. üîß Key Features:  - Retrieves shipments with optional region filter(cacheable for LWC/Aura) - Updates a list of ShipmentRequest__c records with error handling - Publishes platform events(ShipmentRequestEvent__e ) for shipment changes ‚öôÔ∏è Use Cases:  - Display shipment requests filtered by region in UI - Update shipment status or details via client components - Trigger downstream processing via event publication üì§ Event:  - Platform Event Published: ShipmentRequestEvent__e  @AuraEnabled Methods:  - getShipmentsByRegion(String region)  ‚Üí List<ShipmentRequest__c>   - updateShipments(List<ShipmentRequest__c>)  ‚Üí void  @return  - getShipmentsByRegion()  returns up to 200 shipment records filtered by region or all if 'All'  is passed - updateShipments()  updates provided records and throws AuraHandledException  on DML failure @namedcredential  - None @sampleinput  getShipmentsByRegion('East')  @sampleoutput  List of ShipmentRequest__c  records sorted by CreatedDate Signature public with sharing class ShipmentRequestController Author : Manigandan Dhamodaran @last modified on  : 06-26-2025 @last modified by  : Manigandan Dhamodaran Example event { \"ShipmentId__c\": \"a01xx0000001234\", \"Status__c\": \"Dispatched\" } ShipmentRequestController Methods getShipmentsByRegion(region) publishShipmentEvent(shipments) updateShipments(shipmentsToUpdate) getShipmentsByRegion(region) Signature @AuraEnabled(cacheable=true) public static List<ShipmentRequest__c> getShipmentsByRegion(String region) publishShipmentEvent(shipments) Signature public static void publishShipmentEvent(List<ShipmentRequest__c> shipments) updateShipments(shipmentsToUpdate) Signature @AuraEnabled public static void updateShipments(List<ShipmentRequest__c> shipmentsToUpdate)"
    },
    {
        "title": "ShipmentRequestTriggerTest",
        "fileName": "ShipmentRequestTriggerTest.html",
        "text": "ShipmentRequestTriggerTest : Signature @isTest public class ShipmentRequestTriggerTest Author : Manigandan Dhamodaran ShipmentRequestTriggerTest Methods setupData() testInsertInReviewStatus() testTriggerCallsControllerPublishEvent() testUpdateExitReviewAsSameUser() testUpdateReviewLockedByAnotherUser() setupData() Signature @testSetup static void setupData() testInsertInReviewStatus() Signature @isTest static void testInsertInReviewStatus() testTriggerCallsControllerPublishEvent() Signature @isTest static void testTriggerCallsControllerPublishEvent() testUpdateExitReviewAsSameUser() Signature @isTest static void testUpdateExitReviewAsSameUser() testUpdateReviewLockedByAnotherUser() Signature @isTest static void testUpdateReviewLockedByAnotherUser()"
    },
    {
        "title": "ShipmentStatusBatch",
        "fileName": "ShipmentStatusBatch.html",
        "text": "ShipmentStatusBatch Batch class to manage shipment status updates @batchable @allowsCallouts : This batch class processes shipment requests with the status 'Dispatching' and updates their status. It is designed to be run periodically to ensure that shipment statuses are kept up-to-date. Signature global class ShipmentStatusBatch implements Database.Batchable<sObject>, Database.AllowsCallouts Author : Manigandan Dhamodaran ShipmentStatusBatch Methods execute(bc, scope) finish(bc) start(bc) execute(bc, scope) Signature global void execute(Database.BatchableContext bc, List<ShipmentRequest__c> scope) finish(bc) Signature global void finish(Database.BatchableContext bc) start(bc) Signature global Database.QueryLocator start(Database.BatchableContext bc)"
    },
    {
        "title": "ShipmentStatusBatchSchedule",
        "fileName": "ShipmentStatusBatchSchedule.html",
        "text": "ShipmentStatusBatchSchedule : This class is responsible for scheduling the ShipmentStatusBatch to run periodically. It implements the Schedulable interface and defines the execute method to run the batch. The batch can be scheduled using a cron expression to run at specific intervals. Signature global class ShipmentStatusBatchSchedule implements Schedulable Author : Manigandan Dhamodaran ShipmentStatusBatchSchedule Methods execute(sc) execute(sc) Signature global void execute(SchedulableContext sc)"
    },
    {
        "title": "ShipmentStatusBatchScheduleTest",
        "fileName": "ShipmentStatusBatchScheduleTest.html",
        "text": "ShipmentStatusBatchScheduleTest : Signature @isTest public class ShipmentStatusBatchScheduleTest Author : Manigandan Dhamodaran ShipmentStatusBatchScheduleTest Methods testScheduleBatchClass() testScheduleBatchClass() Signature @isTest static void testScheduleBatchClass()"
    },
    {
        "title": "ShipmentStatusBatchTest",
        "fileName": "ShipmentStatusBatchTest.html",
        "text": "ShipmentStatusBatchTest : Signature @isTest private class ShipmentStatusBatchTest Author : Manigandan Dhamodaran ShipmentStatusBatchTest Methods setupData() testBatchExecution() setupData() Signature @testSetup static void setupData() testBatchExecution() Signature @isTest static void testBatchExecution()"
    }
];
