export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "BookingCalloutHandler",
        "fileName": "BookingCalloutHandler.html",
        "text": "BookingCalloutHandler : Signature public with sharing class BookingCalloutHandler Author : Manigandan Dhamodaran BookingCalloutHandler Methods processTrips(oldTripMap, newTripMap) sendTripBookingToAPI(tripIds) processTrips(oldTripMap, newTripMap) Signature public void processTrips(Map<Id, Trip__c> oldTripMap, Map<Id, Trip__c> newTripMap) sendTripBookingToAPI(tripIds) Signature @future(callout=true) public static void sendTripBookingToAPI(List<Id> tripIds)"
    },
    {
        "title": "FlightService",
        "fileName": "FlightService.html",
        "text": "FlightService : Flight service for handling trips, flights, and tickets Signature public with sharing class FlightService Author : Manigandan Dhamodaran FlightService Methods assignFlight(tripId, flightId) Assign a flight to a trip and allocate a ticket to the trip’s contact cancelTrip(tripId) Cancel a trip → free up its ticket and reset trip fields clearTripFields(trip) Reset flight, ticket, and status fields on a trip freeUpTicket(ticketId) Free up a ticket by setting Contact__c = null getAvailableFlights(tripId) Get flights within the next 50 days that still have available tickets assignFlight(tripId, flightId) Assign a flight to a trip and allocate a ticket to the trip’s contact Signature @AuraEnabled public static Trip__c assignFlight(Id tripId, Id flightId) cancelTrip(tripId) Cancel a trip → free up its ticket and reset trip fields Signature @AuraEnabled public static Trip__c cancelTrip(Id tripId) clearTripFields(trip) Reset flight, ticket, and status fields on a trip Signature private static void clearTripFields(Trip__c trip) freeUpTicket(ticketId) Free up a ticket by setting Contact__c = null Signature private static void freeUpTicket(Id ticketId) getAvailableFlights(tripId) Get flights within the next 50 days that still have available tickets Signature @AuraEnabled(cacheable=true) public static List<FlightWrapper> getAvailableFlights(Id tripId) FlightService.FlightWrapper Signature public class FlightWrapper FlightService.FlightWrapper Properties Name Signature Annotations availableTickets public Integer availableTickets @AuraEnabled flightName public String flightName @AuraEnabled idvalue public Id idvalue @AuraEnabled start public DateTime start @AuraEnabled"
    },
    {
        "title": "FlightServiceTest",
        "fileName": "FlightServiceTest.html",
        "text": "FlightServiceTest : Signature @IsTest public class FlightServiceTest Author : Manigandan Dhamodaran FlightServiceTest Methods setupTestData() testAssignFlight() testCancelTrip() testGetAvailableFlights() setupTestData() Signature @TestSetup static void setupTestData() testAssignFlight() Signature @IsTest static void testAssignFlight() testCancelTrip() Signature @IsTest static void testCancelTrip() testGetAvailableFlights() Signature @IsTest static void testGetAvailableFlights()"
    },
    {
        "title": "HttpCalloutMockUtility",
        "fileName": "HttpCalloutMockUtility.html",
        "text": "HttpCalloutMockUtility : Reusable HTTP callout mock utility for tests. Allows setting a mock response for any endpoint with a custom status code and JSON body. Example usage: @IsTest static void testCalloutSuccess() { String jsonResponse = '{\"result\":\"success\",\"message\":\"Operation completed\"}'; HttpCalloutMockUtility.setMock('MyAPI', 200, jsonResponse); Test.startTest(); // Call your method that performs the callout here Test.stopTest(); } @IsTest static void testCalloutError() { String jsonResponse = '{\"error\":\"Internal Server Error\"}'; HttpCalloutMockUtility.setMock('MyAPI', 500, jsonResponse); Test.startTest(); // Call your method that performs the callout here Test.stopTest(); } Signature @IsTest public class HttpCalloutMockUtility Author : Manigandan Dhamodaran HttpCalloutMockUtility Methods setMock(endpointContains, statusCode, responseBody) Utility method to set the mock in a test setMock(endpointContains, statusCode, responseBody) Utility method to set the mock in a test Signature public static void setMock(String endpointContains, Integer statusCode, String responseBody) HttpCalloutMockUtility.GenericHttpMock Signature public class GenericHttpMock implements HttpCalloutMock HttpCalloutMockUtility.GenericHttpMock Properties Name Signature endpointContains public String endpointContains responseBody public String responseBody statusCode public Integer statusCode HttpCalloutMockUtility.GenericHttpMock Constructors GenericHttpMock(endpointContains, statusCode, responseBody) GenericHttpMock(endpointContains, statusCode, responseBody) Signature public GenericHttpMock(String endpointContains, Integer statusCode, String responseBody) HttpCalloutMockUtility.GenericHttpMock Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "RestCalloutBase",
        "fileName": "RestCalloutBase.html",
        "text": "RestCalloutBase Signature public inherited sharing abstract class RestCalloutBase RestCalloutBase Properties Name Signature HTTP_REQUEST_TIME_OUT public final Integer HTTP_REQUEST_TIME_OUT path private String path request protected HttpRequest request response protected HttpResponse response RestCalloutBase Constructors RestCalloutBase(httpMethod, path) RestCalloutBase(httpMethod, path) Signature public RestCalloutBase(String httpMethod, String path) RestCalloutBase Methods send(namedCredential, restEndpoint, requestBody) send(namedCredential, restEndpoint, requestBody) Signature public virtual HttpResponse send(String namedCredential, String restEndpoint, String requestBody)"
    },
    {
        "title": "TestDataFactory",
        "fileName": "TestDataFactory.html",
        "text": "TestDataFactory : Signature @IsTest public class TestDataFactory Author : Manigandan Dhamodaran TestDataFactory Properties Name Signature Annotations Description DEFAULT_VALUE public static final IFieldDefaultValue DEFAULT_VALUE Default value generator, used to auto-generate default values for non required fields defaultValueProvider public static DefaultValueProvider defaultValueProvider Default Value Provider property, used to override the default value provider instance  * DOT private static final String DOT Constant that contains a dot '.' dvPrvdr private static DefaultValueProvider dvPrvdr Default value provider instance isPersonAccountEnabled private static Boolean isPersonAccountEnabled @TestVisible Determine if person account is enabled in current org * mapOfFieldTokensMap private static Map<Schema.SObjectType,Map<String, Schema.SObjectField>> mapOfFieldTokensMap @TestVisible Map of sObject types with their corresponding map of field Tokens TestDataFactory Methods createSObject(sObjectName) create an sObject createSObject(sObjectName, doInsert) create an sObject createSObject(sObjectName, mapOfValuesOverride) create an sObject with a map to override field values createSObject(sObjectName, mapOfValuesOverride, doInsert) create an sObject with a map to override field values createSObjectList(sObjectName, numberOfSObjects) create a list of sObjects createSObjectList(sObjectName, numberOfSObjects, doInsert) create a list of sObjects createSObjectList(sObjectName, mapOfValuesOverride, numberOfSObjects) create a list of sObjects with a map to override field values createSObjectList(sObjectName, mapOfValuesOverride, numberOfSObjects, doInsert) create a list of sObjects with a map to override field values dummyTest() this is a dummy test method needed in order to create a managed package for TestDataFactory formatErrorMessage(message, mergeValues, originalMessage) format an error message getFieldNameFromRelationshipName(relationshipName) get field name from a relationship name getFieldTokensMap(sObjectType) get the field tokens map of an sObject type with caching mergeValue(text, name, value) merge given value in a string createSObject(sObjectName) create an sObject Signature public static SObject createSObject(String sObjectName) Parameters sObjectName Type: String (String): name of the sObject to be created Returns sObject instance Example Account acc =(Account)TestDataFactory.createSObject('Account'); createSObject(sObjectName, doInsert) create an sObject Signature public static SObject createSObject(String sObjectName, Boolean doInsert) Parameters sObjectName Type: String (String): name of the sObject to be created Boolean(Boolean): if true the sObject instance is inserted to the Salesforce database Returns sObject instance Example Account acc =(Account)TestDataFactory.createSObject('Account',false); createSObject(sObjectName, mapOfValuesOverride) create an sObject with a map to override field values Signature public static SObject createSObject(String sObjectName, Map<String,Object> mapOfValuesOverride) Parameters sObjectName Type: String (String): name of the sObject to be created mapOfValuesOverride Type: Map<String,Object> (Map<String,Object>): map of values Returns sObject instance Example Account acc =(Account)TestDataFactory.createSObject('Account',new Map<String,Object>{ 'Description' => 'Test' }); createSObject(sObjectName, mapOfValuesOverride, doInsert) create an sObject with a map to override field values Signature public static SObject createSObject(String sObjectName, Map<String,Object> mapOfValuesOverride, Boolean doInsert) Parameters sObjectName Type: String (String): name of the sObject to be created mapOfValuesOverride Type: Map<String,Object> (Map<String,Object>): map of values doInsert Type: Boolean (Boolean): if true the sObject instance is inserted to the Salesforce database Returns sObject instance Example Account acc =(Account)TestDataFactory.createSObject('Account',new Map<String,Object>{ 'Description' => 'Test' },false); createSObjectList(sObjectName, numberOfSObjects) create a list of sObjects Signature public static List<SObject> createSObjectList(String sObjectName, Integer numberOfSObjects) Parameters sObjectName Type: String (String): name of the sObject to be created numberOfSObjects Type: Integer (Integer): number of sObjects to be created Returns list of sObject instances Example List<Account> accList = TestDataFactory.createSObjectList('Account',10); createSObjectList(sObjectName, numberOfSObjects, doInsert) create a list of sObjects Signature public static List<SObject> createSObjectList(String sObjectName, Integer numberOfSObjects, Boolean doInsert) Parameters sObjectName Type: String (String): name of the sObject to be created numberOfSObjects Type: Integer (Integer): number of sObjects to be created doInsert Type: Boolean (Boolean): if true the sObject list instances is inserted to the Salesforce database Returns list of sObject instances Example List<Account> accList = TestDataFactory.createSObjectList('Account',10,false); createSObjectList(sObjectName, mapOfValuesOverride, numberOfSObjects) create a list of sObjects with a map to override field values Signature public static List<SObject> createSObjectList(String sObjectName, Map<String,Object> mapOfValuesOverride, Integer numberOfSObjects) Parameters sObjectName Type: String (String): name of the sObject to be created mapOfValuesOverride Type: Map<String,Object> (Map<String,Object>): map of values numberOfSObjects Type: Integer (Integer): number of sObjects to be created Returns list of sObject instances Example List<Account> accList = TestDataFactory.createSObjectList('Account',new Map<String,Object>{ 'Description' => 'Test' },10); createSObjectList(sObjectName, mapOfValuesOverride, numberOfSObjects, doInsert) create a list of sObjects with a map to override field values Signature public static List<SObject> createSObjectList(String sObjectName, Map<String,Object> mapOfValuesOverride, Integer numberOfSObjects, Boolean doInsert) Parameters sObjectName Type: String (String): name of the sObject to be created mapOfValuesOverride Type: Map<String,Object> (Map<String,Object>): map of values numberOfSObjects Type: Integer (Integer): number of sObjects to be created doInsert Type: Boolean (Boolean): if true the sObject list instances is inserted to the Salesforce database Returns list of sObject instances Example List<Account> accList = TestDataFactory.createSObjectList('Account',new Map<String,Object>{ 'Description' => 'Test' },10,false); dummyTest() this is a dummy test method needed in order to create a managed package for TestDataFactory Signature @IsTest private static void dummyTest() formatErrorMessage(message, mergeValues, originalMessage) format an error message Signature @TestVisible private static String formatErrorMessage(String message, List<String> mergeValues, String originalMessage) Parameters message Type: String (String): error message mergeValues Type: List<String> (List<String>): values to be merge in the error message originalMessage Type: String (String): original error message Returns error message getFieldNameFromRelationshipName(relationshipName) get field name from a relationship name Signature @TestVisible private static String getFieldNameFromRelationshipName(String relationshipName) Parameters relationshipName Type: String (String): relationship name Returns field name getFieldTokensMap(sObjectType) get the field tokens map of an sObject type with caching Signature @TestVisible private static Map<String, Schema.SObjectField> getFieldTokensMap(Schema.SObjectType sObjectType) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject type for which the map of field tokens will be returned Returns field tokens map mergeValue(text, name, value) merge given value in a string Signature @TestVisible private static String mergeValue(String text, String name, String value) Parameters text Type: String (String): text with a merge value name Type: String (String): name of the merge value value Type: String (String): value to be merged Returns text with merged value TestDataFactory.AutoFieldDefaultValue wrapper for default value that will be auto generated Signature public class AutoFieldDefaultValue implements IFieldDefaultValue TestDataFactory.AutoFieldDefaultValue Methods getValue(recordIndex) get the value wrapped for a given record index getValue(recordIndex) get the value wrapped for a given record index Signature public Object getValue(Integer recordIndex) Parameters recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns field default value TestDataFactory.DefaultValueProvider virtual class DefaultValueProvider : manage the creation of the defaultMap and getting field default values Signature public virtual class DefaultValueProvider implements IDefaultValueProvider TestDataFactory.DefaultValueProvider Properties Name Signature Annotations Description accountDefaultRecordTypeId private Id accountDefaultRecordTypeId @TestVisible Account default record type Id ERR_BAD_RECORDTYPE_ID_FOR_ACCOUNT private final String ERR_BAD_RECORDTYPE_ID_FOR_ACCOUNT Bad record type Id provided for Account ERR_LIST_VALUE_NOT_SUPPORTED private final String ERR_LIST_VALUE_NOT_SUPPORTED List values is not supported for field {0} personAccountRecordTypes private Set<Id> personAccountRecordTypes @TestVisible Person Account record type Ids TestDataFactory.DefaultValueProvider Methods convertMapValueTypes(prefix, mapOfValues) converting a map from Map(key:String,value:Object) to Map(key:String,value:IFieldDefaultValue) convertSetToLowerCase(setOfValues) converting a given set of String to set of lower case string values defineSObjectOptionalFields(sObjectType) define a set of optional fields for a given sObject defineSObjectRequiredFields(sObjectType) define a set of required fields for a given sObject generateDefaultMapOfValues(sObjectType, mapOfValues, prefix) generate the default map of values for a given sObjectType. The default value map of values will contain the map of values overrided and generated value for all required fields of the sObjectType getBase64DefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Base64 field type getCheckboxDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for checkbox field type getCurrencyDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Currency field type getDateDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Date field type getDateTimeDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Datetime field type getDefaultMapOfValues(sObjectType, mapOfValuesOverride) get the default map of values for a given sObjectType. The default map of value contains fully qualified field name as a key and the field value wrapped in FieldDefaultValue instance getDefaultValue(sObjectDesc, fieldDesc, recordIndex) generate a default value for a given field of an sObject depending on the field type, the corresponding get{FieldType}DefaultValue method will be invoked to retrieve the default value getDefinedSObjectOptionalFields(sObjectType) get defined set of optional fields for a given sObject type getDefinedSObjectRequiredFields(sObjectType) get defined set of required fields for a given sObject type and record type id getEmailDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Email field type getGeolocationDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Geolocation field type getMultiPicklistDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Multipicklist field type getNumberDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Number field type getPercentDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Percent field type getPhoneDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Phone field type getPicklistDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Picklist field type getRelationshipKeySet(keySetOverride, prefix) get relationship names keyset that starts with a given prefix getSFDefaultPicklistValue(fieldDesc) get the Salesforce default value for given picklist getTextAreaDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for TextArea field type getTextDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Text field type getTimeDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Time field type getURLDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for URL field type isDefaultValueRequired(fieldDesc) test if a field requires a default value managePersonAccountOrgEnabled(mapOfValues, prefix, definedRequiredFields) manage the map of values and the defined required fields for Account if person account enabled org putRelationshipField(mapOfValues, fieldDesc, prefix) put a relationship field into a map of values convertMapValueTypes(prefix, mapOfValues) converting a map from Map(key:String,value:Object) to Map(key:String,value:IFieldDefaultValue) Signature @TestVisible private Map<String,IFieldDefaultValue> convertMapValueTypes(String prefix, Map<String,Object> mapOfValues) Parameters prefix Type: String (String): prefix(example : Contact.Account.) mapOfValues Type: Map<String,Object> (Map<String,Object>): map of values to convert Returns converted map convertSetToLowerCase(setOfValues) converting a given set of String to set of lower case string values Signature @TestVisible private Set<String> convertSetToLowerCase(Set<String> setOfValues) Parameters setOfValues Type: Set<String> (Set<String>): set of values to convert to lower case Returns converted set defineSObjectOptionalFields(sObjectType) define a set of optional fields for a given sObject Signature public virtual Set<String> defineSObjectOptionalFields(Schema.SObjectType sObjectType) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject Type for which the optional fields will be defined Returns set of defined optional fields defineSObjectRequiredFields(sObjectType) define a set of required fields for a given sObject Signature public virtual Set<String> defineSObjectRequiredFields(Schema.SObjectType sObjectType) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject Type for which the required fields will be defined Returns set of defined required fields generateDefaultMapOfValues(sObjectType, mapOfValues, prefix) generate the default map of values for a given sObjectType. The default value map of values will contain the map of values overrided and generated value for all required fields of the sObjectType Signature @TestVisible private void generateDefaultMapOfValues(Schema.SObjectType sObjectType, Map<String,IFieldDefaultValue> mapOfValues, String prefix) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject Type for which the map of values will generated mapOfValues Type: Map<String,IFieldDefaultValue> (Map<String,IFieldDefaultValue>): map of values prefix Type: String (String): prefix of the relationship(example : Contact.Account.) getBase64DefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Base64 field type Signature public virtual Blob getBase64DefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns base64 default value getCheckboxDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for checkbox field type Signature public virtual Boolean getCheckboxDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns checkbox default value getCurrencyDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Currency field type Signature public virtual Decimal getCurrencyDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns currency default value getDateDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Date field type Signature public virtual Date getDateDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns date default value getDateTimeDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Datetime field type Signature public virtual Datetime getDateTimeDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns datetime default value getDefaultMapOfValues(sObjectType, mapOfValuesOverride) get the default map of values for a given sObjectType. The default map of value contains fully qualified field name as a key and the field value wrapped in FieldDefaultValue instance Signature public Map<String,IFieldDefaultValue> getDefaultMapOfValues(Schema.SObjectType sObjectType, Map<String,Object> mapOfValuesOverride) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject Type for which the map of values will be generated mapOfValuesOverride Type: Map<String,Object> (Map<String,Object>): map of values that will override the the auto-generated map of values Returns map of values getDefaultValue(sObjectDesc, fieldDesc, recordIndex) generate a default value for a given field of an sObject depending on the field type, the corresponding get{FieldType}DefaultValue method will be invoked to retrieve the default value Signature @TestVisible private Object getDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns the generated field default value getDefinedSObjectOptionalFields(sObjectType) get defined set of optional fields for a given sObject type Signature @TestVisible private Set<String> getDefinedSObjectOptionalFields(Schema.SObjectType sObjectType) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject type for which the defined optional fields will be returned recordTypeValue(Object): record type id provided for to the sObject Type Returns set of defined optional fields getDefinedSObjectRequiredFields(sObjectType) get defined set of required fields for a given sObject type and record type id Signature @TestVisible private Set<String> getDefinedSObjectRequiredFields(Schema.SObjectType sObjectType) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject type for which the defined required fields will be returned recordTypeValue(Object): record type id provided for to the sObject Type Returns set of defined required fields getEmailDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Email field type Signature public virtual String getEmailDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns email default value getGeolocationDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Geolocation field type Signature public virtual Location getGeolocationDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns geolocation default value getMultiPicklistDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Multipicklist field type Signature public virtual String getMultiPicklistDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns multipicklist default value getNumberDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Number field type Signature public virtual Decimal getNumberDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns number default value getPercentDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Percent field type Signature public virtual Decimal getPercentDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns percent default value getPhoneDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Phone field type Signature public virtual String getPhoneDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns phone default value getPicklistDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Picklist field type Signature public virtual String getPicklistDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns picklist default value getRelationshipKeySet(keySetOverride, prefix) get relationship names keyset that starts with a given prefix Signature @TestVisible private Set<String> getRelationshipKeySet(Set<String> keySetOverride, String prefix) Parameters keySetOverride Type: Set<String> (Set<String>): keySet of fully qualified field names prefix Type: String (String): prefix(example : Contact.Account.) Returns set of relationship names Example keySetOverride = {Contact.Account.Name,Contact.FirstName} Prefix : Contact. Result : {Account} getSFDefaultPicklistValue(fieldDesc) get the Salesforce default value for given picklist Signature @TestVisible private String getSFDefaultPicklistValue(Schema.DescribeFieldResult fieldDesc) Parameters fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information Returns The picklist default value on Salesforce getTextAreaDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for TextArea field type Signature public virtual String getTextAreaDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns text area default value getTextDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Text field type Signature public virtual String getTextDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns text default value getTimeDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for Time field type Signature public virtual Time getTimeDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns time default value getURLDefaultValue(sObjectDesc, fieldDesc, recordIndex) get the default value for URL field type Signature public virtual String getURLDefaultValue(Schema.DescribeSObjectResult sObjectDesc, Schema.DescribeFieldResult fieldDesc, Integer recordIndex) Parameters sObjectDesc Type: Schema.DescribeSObjectResult (Schema.DescribeSObjectResult): sObject describe information fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns URL default value isDefaultValueRequired(fieldDesc) test if a field requires a default value Signature @TestVisible private Boolean isDefaultValueRequired(Schema.DescribeFieldResult fieldDesc) Parameters fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information Returns true if a default value is required managePersonAccountOrgEnabled(mapOfValues, prefix, definedRequiredFields) manage the map of values and the defined required fields for Account if person account enabled org Signature @TestVisible private void managePersonAccountOrgEnabled(Map<String,IFieldDefaultValue> mapOfValues, String prefix, Set<String> definedRequiredFields) Parameters mapOfValues Type: Map<String,IFieldDefaultValue> (Map<String,IFieldDefaultValue>): map of values from which the field value id will be extracted prefix Type: String (String): prefix of the relationship field(example : Contact.Account.) definedRequiredFields Type: Set<String> (Set<String>): Set of defined required fields putRelationshipField(mapOfValues, fieldDesc, prefix) put a relationship field into a map of values Signature @TestVisible private void putRelationshipField(Map<String,IFieldDefaultValue> mapOfValues, Schema.DescribeFieldResult fieldDesc, String prefix) Parameters mapOfValues Type: Map<String,IFieldDefaultValue> (Map<String,IFieldDefaultValue>): map of values in which relationship field will be put fieldDesc Type: Schema.DescribeFieldResult (Schema.DescribeFieldResult): field describe information information of the relationship field prefix Type: String (String): prefix of the relationship field(example : Contact.Account.) TestDataFactory.FieldDefaultValue wrapper for a field default value Signature @TestVisible private class FieldDefaultValue implements IFieldDefaultValue TestDataFactory.FieldDefaultValue Properties Name Signature Description dvPrvdr private DefaultValueProvider dvPrvdr Instance of the container class fieldDesc private Schema.DescribeFieldResult fieldDesc Field describe information sObjectDesc private Schema.DescribeSObjectResult sObjectDesc SObject describe information value private Object value Field value TestDataFactory.FieldDefaultValue Constructors FieldDefaultValue(value) construtor to wrap a griven field value FieldDefaultValue(dvPrvdr, sObjectDesc, fieldDesc) construtor to wrap a field value that will be generated based on the given sObject & Field describe informations FieldDefaultValue(value) construtor to wrap a griven field value Signature public FieldDefaultValue(Object value) Parameters value Type: Object (Object): the value that will be wrapped FieldDefaultValue(dvPrvdr, sObjectDesc, fieldDesc) construtor to wrap a field value that will be generated based on the given sObject & Field describe informations Signature public FieldDefaultValue(DefaultValueProvider dvPrvdr,Schema.DescribeSObjectResult sObjectDesc,Schema.DescribeFieldResult fieldDesc) Parameters dvPrvdr Type: DefaultValueProvider (DefaultValueProvider): default value provider instance of the containing class DefaultValueProvider sObjectDesc(Schema.DescribeSObjectResult): sObject describe information fieldDesc(Schema.DescribeFieldResult): field describe information TestDataFactory.FieldDefaultValue Methods getValue(recordIndex) get the wrapped value for a given record index getValue(recordIndex) get the wrapped value for a given record index Signature public Object getValue(Integer recordIndex) Parameters recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns field default value TestDataFactory.IDefaultValueProvider interface IDefaultValueProvider Signature public interface IDefaultValueProvider TestDataFactory.IDefaultValueProvider Methods getDefaultMapOfValues(sObjectType, mapOfValuesOverride) getDefaultMapOfValues(sObjectType, mapOfValuesOverride) Signature Map<String,IFieldDefaultValue> getDefaultMapOfValues(Schema.SObjectType sObjectType, Map<String,Object> mapOfValuesOverride) TestDataFactory.IFieldDefaultValue common interface fo the field default value classes Signature public interface IFieldDefaultValue TestDataFactory.IFieldDefaultValue Methods getValue(recordIndex) get the value wrapped for a given record index getValue(recordIndex) get the value wrapped for a given record index Signature Object getValue(Integer recordIndex) TestDataFactory.ISObjectFactory interface ISObjectFactory Signature public interface ISObjectFactory TestDataFactory.ISObjectFactory Methods getListSObjectInstance(mapOfValuesOverride, doInsert, numberOfSObjects) getSObjectInstance(mapOfValuesOverride, doInsert) getSObjectManager() getListSObjectInstance(mapOfValuesOverride, doInsert, numberOfSObjects) Signature List<SObject> getListSObjectInstance(Map<String,Object> mapOfValuesOverride, Boolean doInsert, Integer numberOfSObjects) getSObjectInstance(mapOfValuesOverride, doInsert) Signature SObject getSObjectInstance(Map<String,Object> mapOfValuesOverride, Boolean doInsert) getSObjectManager() Signature ISObjectManager getSObjectManager() TestDataFactory.ISObjectManager interface ISObjectManager Signature public interface ISObjectManager TestDataFactory.ISObjectManager Methods getMainSObjectList() getRelationship(index, relationshipName) getSObject(index) insertAll() setRelationship(index, relationshipName, sObj) setSObject(index, sObj) getMainSObjectList() Signature List<SObject> getMainSObjectList() getRelationship(index, relationshipName) Signature SObject getRelationship(Integer index, String relationshipName) getSObject(index) Signature SObject getSObject(Integer index) insertAll() Signature void insertAll() setRelationship(index, relationshipName, sObj) Signature void setRelationship(Integer index, String relationshipName, SObject sObj) setSObject(index, sObj) Signature void setSObject(Integer index, SObject sObj) TestDataFactory.ListFieldDefaultValue wrapper for a list of field default values Signature @TestVisible private class ListFieldDefaultValue implements IFieldDefaultValue TestDataFactory.ListFieldDefaultValue Properties Name Signature Description listValues private List<Object> listValues Field list values TestDataFactory.ListFieldDefaultValue Constructors ListFieldDefaultValue(listValues) construtor to wrap a griven field list of values ListFieldDefaultValue(listValues) construtor to wrap a griven field list of values Signature public ListFieldDefaultValue(List<Object> listValues) Parameters listValues Type: List<Object> (List<Object>): the list of values that will be wrapped TestDataFactory.ListFieldDefaultValue Methods getValue(recordIndex) get the wrapped value for a given record index size() return the size of the wrapped list of values getValue(recordIndex) get the wrapped value for a given record index Signature public Object getValue(Integer recordIndex) Parameters recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns value at recordIndex position of list field default values size() return the size of the wrapped list of values Signature public Integer size() TestDataFactory.ListRelationshipFieldDefaultValue wrapper for a list of relationship field default values Signature @TestVisible private class ListRelationshipFieldDefaultValue implements IFieldDefaultValue TestDataFactory.ListRelationshipFieldDefaultValue Properties Name Signature Description listSObjectValues private List<SObject> listSObjectValues Field list sObject values TestDataFactory.ListRelationshipFieldDefaultValue Constructors ListRelationshipFieldDefaultValue(listSObjectValues) construtor to wrap a griven field list of sObject values ListRelationshipFieldDefaultValue(listSObjectValues) construtor to wrap a griven field list of sObject values Signature public ListRelationshipFieldDefaultValue(List<SObject> listSObjectValues) Parameters listSObjectValues Type: List<SObject> (List<SObject>): the list of values that will be wrapped TestDataFactory.ListRelationshipFieldDefaultValue Methods getValue(recordIndex) get the wrapped list sObject values for a given record index size() return the size of the wrapped list of the sObject values getValue(recordIndex) get the wrapped list sObject values for a given record index Signature public Object getValue(Integer recordIndex) Parameters recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns id of the sObject at recordIndex position of list relationship field default values size() return the size of the wrapped list of the sObject values Signature public Integer size() TestDataFactory.RelationshipFieldDefaultValue wrapper for a relationship field default value Signature @TestVisible private class RelationshipFieldDefaultValue implements IFieldDefaultValue TestDataFactory.RelationshipFieldDefaultValue Properties Name Signature Description sObjectValue private SObject sObjectValue Field value TestDataFactory.RelationshipFieldDefaultValue Constructors RelationshipFieldDefaultValue(sObjectValue) construtor to wrap a griven field sObject value RelationshipFieldDefaultValue(sObjectValue) construtor to wrap a griven field sObject value Signature public RelationshipFieldDefaultValue(SObject sObjectValue) Parameters sObjectValue Type: SObject (Object): the sObject value that will be wrapped TestDataFactory.RelationshipFieldDefaultValue Methods getValue(recordIndex) get the wrapped sObject value for a given record index getValue(recordIndex) get the wrapped sObject value for a given record index Signature public Object getValue(Integer recordIndex) Parameters recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns Id of the sObject field default value TestDataFactory.SObjectFactory class SObjectFactory : manage the creation of all the sObjects instances Signature public class SObjectFactory implements ISObjectFactory TestDataFactory.SObjectFactory Properties Name Signature Description ERR_FIELD_NOT_EXIST private final String ERR_FIELD_NOT_EXIST The field \"{0}\" does not exist on \"{1}\" or the value type provided is incorrect ERR_NOT_FOUND_SOBJECT private final String ERR_NOT_FOUND_SOBJECT Unable to find the sObject ERR_RELATIONSHIP_NOT_EXIST private final String ERR_RELATIONSHIP_NOT_EXIST The relationship \"{0}\" does not exist on \"{1}\" ERR_UNABLE_TO_GET_FIELD_VALUE private final String ERR_UNABLE_TO_GET_FIELD_VALUE Unable to get the value for the field \"{0}\" sObjectName private String sObjectName Main sObject Name to instantiated sObjectType private Schema.SObjectType sObjectType Main sObject type to instantiated sObjMgr private SObjectManager sObjMgr Instance of SObject Manager to store all the created sObject instances TestDataFactory.SObjectFactory Constructors SObjectFactory(sObjectType) construtor SObjectFactory(sObjectType) construtor Signature public SObjectFactory(Schema.SObjectType sObjectType) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): main sObject type to be instantiated TestDataFactory.SObjectFactory Methods getFieldValueFromMapOfValues(mapOfValues, fullyQualifiedFieldName, recordIndex) get the field value from the map of values for a given record index and fully qualified field name getListSObjectInstance(mapOfValuesOverride, doInsert, numberOfSObjects) generate a list of sObject instances and apply the override map of values getRelatedSObjectInstance(sObjectType, relationshipName, errorMessageMergeValue) get related sObject instance of an sObject type for a given relationship name getRelationshipInstance(fullyQualifiedRelationshipName, recordIndex) Recursive method that initiate all the related sObjects of a given fully qualified relationship name getSObjectInstance(mapOfValuesOverride, doInsert) generate an sObject instance and apply the override map of values getSObjectManager() get the SObject Manager instance initSObjectInstance(mapOfValues, recordIndex) initiate the main sObject instance with all related sObject and apply the map of values putField(sObj, fieldName, fieldValue, errorMessageMergeValue) set field value in given sObject instance putSObject(sObj, relationshipName, sObjectValue, errorMessageMergeValue) attach an sObject into a related sObject getFieldValueFromMapOfValues(mapOfValues, fullyQualifiedFieldName, recordIndex) get the field value from the map of values for a given record index and fully qualified field name Signature @TestVisible private Object getFieldValueFromMapOfValues(Map<String,IFieldDefaultValue> mapOfValues, String fullyQualifiedFieldName, Integer recordIndex) Parameters mapOfValues Type: Map<String,IFieldDefaultValue> (Map<String,IFieldDefaultValue>): map of values with key as field name and value as the default value to be used when instantiating the sObject. fullyQualifiedFieldName Type: String (String): fully qualified field name(example : Contact.Account.Name) recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns field value getListSObjectInstance(mapOfValuesOverride, doInsert, numberOfSObjects) generate a list of sObject instances and apply the override map of values Signature public List<SObject> getListSObjectInstance(Map<String,Object> mapOfValuesOverride, Boolean doInsert, Integer numberOfSObjects) Parameters mapOfValuesOverride Type: Map<String,Object> (Map<String,Object>): map of values to override when instanciating the sObject doInsert Type: Boolean (Boolean): if true the sObject list instances is inserted to the Salesforce database numberOfSObjects Type: Integer (Integer): number of sObjects to be instantiated Returns list of sObject instances getRelatedSObjectInstance(sObjectType, relationshipName, errorMessageMergeValue) get related sObject instance of an sObject type for a given relationship name Signature @TestVisible private SObject getRelatedSObjectInstance(Schema.SObjectType sObjectType, String relationshipName, String errorMessageMergeValue) Parameters sObjectType Type: Schema.SObjectType (Schema.SObjectType): sObject type to which the generate sObject is related relationshipName Type: String (String): relationship name that links the sObject type and the sObject instance that will be generated errorMessageMergeValue Type: String (String): merge value provided only for error message generation(example : Contact.Account) Returns the generated related sObject instance getRelationshipInstance(fullyQualifiedRelationshipName, recordIndex) Recursive method that initiate all the related sObjects of a given fully qualified relationship name Signature @TestVisible private SObject getRelationshipInstance(String fullyQualifiedRelationshipName, Integer recordIndex) Parameters fullyQualifiedRelationshipName Type: String (String): fully qualified relationship name(example : Case.Contact.Account) recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 Returns main sObject instance with all related sObjects attached to it getSObjectInstance(mapOfValuesOverride, doInsert) generate an sObject instance and apply the override map of values Signature public SObject getSObjectInstance(Map<String,Object> mapOfValuesOverride, Boolean doInsert) Parameters mapOfValuesOverride Type: Map<String,Object> (Map<String,Object>): map of values to override when instanciating the sObject doInsert Type: Boolean (Boolean): if true the sObject list instances is inserted to the Salesforce database Returns sObject instance getSObjectManager() get the SObject Manager instance Signature public SObjectManager getSObjectManager() Returns sObject Manager instance initSObjectInstance(mapOfValues, recordIndex) initiate the main sObject instance with all related sObject and apply the map of values Signature @TestVisible private void initSObjectInstance(Map<String,IFieldDefaultValue> mapOfValues, Integer recordIndex) Parameters mapOfValues Type: Map<String,IFieldDefaultValue> (Map<String,IFieldDefaultValue>): map of values with key as field name and value as the default value to be used when instantiating the sObject. This map contains the default values provided as input by the user and the auto-generated default values for the required fields recordIndex Type: Integer (Integer): index number(starting from 0) of each record when creating a list of sObjects. For single sObject creation recordIndex is default to 0 putField(sObj, fieldName, fieldValue, errorMessageMergeValue) set field value in given sObject instance Signature @TestVisible private SObject putField(SObject sObj, String fieldName, Object fieldValue, String errorMessageMergeValue) Parameters sObj Type: SObject (SObject): main sObject instance fieldName Type: String (String): field name of the field to set fieldValue Type: Object (Object): value of the field to set errorMessageMergeValue Type: String (String): merge value provided only for error message generation(example : Contact.Account) Returns main sObject instance putSObject(sObj, relationshipName, sObjectValue, errorMessageMergeValue) attach an sObject into a related sObject Signature @TestVisible private SObject putSObject(SObject sObj, String relationshipName , SObject sObjectValue, String errorMessageMergeValue) Parameters sObj Type: SObject (SObject): main sObject instance relationshipName Type: String (String): sObject name of the related sObject sObjectValue Type: , SObject (SObject): related sObject instance to be attached to the main sObject instance errorMessageMergeValue Type: String (String): merge value provided only for error message generation(example : Contact.Account) Returns main sObject instance TestDataFactory.SObjectManager class SObjectManager : manage all the sObjects instances and the insertion to the salesforce DB Signature public class SObjectManager implements ISObjectManager TestDataFactory.SObjectManager Properties Name Signature Annotations Description ERR_INSERT_SOBJECT private final String ERR_INSERT_SOBJECT Unable to insert \"{0}\" records: {1} mainSObjectList private List<SObject> mainSObjectList @TestVisible List of main sObject instances orderedRelationshipList private List<String> orderedRelationshipList @TestVisible List of ordered relationship names by dot notation relatedSObjMapList private Map<String,List<SObject>> relatedSObjMapList @TestVisible Map of relationship names with their related list of sObject instances sObjectName private String sObjectName Main sObject name TestDataFactory.SObjectManager Constructors SObjectManager(sObjectName) constructor SObjectManager(sObjectName) constructor Signature public SObjectManager(String sObjectName) Returns sObjectName(String): main sObject name TestDataFactory.SObjectManager Methods addRelationshipName(fullyQualifiedRelationshipName) add relationship name to the ordered relationship list, ordered by the number of dots getMainSObjectList() get the list of all main sObject instances getRelationship(index, fullyQualifiedRelationshipName) get a related sObject from the related sObject map list for a given index and relationship name getSObject(index) get an sObject from the main sObject list for a given index insertAll() insert all the sObjects stored in the sObject Manager into the Salesforce database insertList(sObjList, errorMessageMergeValue) execute a DML insert operation on a list of sObjects setChildParentRelationship(sObjChildList, sObjParentList, relationshipName) link a list of child sObject instances to a list of parent sObject instances for a given relationship name setRelationship(index, fullyQualifiedRelationshipName, sObj) set or add a related sObject into the related sObject map list for a given index and relationship name setSObject(index, sObj) set or add an sObject to the main sObject list for a given index addRelationshipName(fullyQualifiedRelationshipName) add relationship name to the ordered relationship list, ordered by the number of dots Signature @testVisible private void addRelationshipName(String fullyQualifiedRelationshipName) Parameters fullyQualifiedRelationshipName Type: String (String): fully qualified relationship name(example contact.account) getMainSObjectList() get the list of all main sObject instances Signature public List<SObject> getMainSObjectList() Returns list of sObject instances getRelationship(index, fullyQualifiedRelationshipName) get a related sObject from the related sObject map list for a given index and relationship name Signature public SObject getRelationship(Integer index, String fullyQualifiedRelationshipName) Parameters index Type: Integer (Integer): index for which the sObject instance will be returned fullyQualifiedRelationshipName Type: String (String): fully qualified relationship name for which the sObject instance will be returned Returns the returnd sObject instance getSObject(index) get an sObject from the main sObject list for a given index Signature public SObject getSObject(Integer index) Parameters index Type: Integer (Integer): index for which the sObject instance will be returned Returns the returnd sObject instance insertAll() insert all the sObjects stored in the sObject Manager into the Salesforce database Signature public void insertAll() insertList(sObjList, errorMessageMergeValue) execute a DML insert operation on a list of sObjects Signature @testVisible private void insertList(List<SObject> sObjList, String errorMessageMergeValue) Parameters sObjList Type: List<SObject> (List<SObject>): list of sObjects to be inserted errorMessageMergeValue Type: String (String): merge value provided only for error message generation(example : .contact.account) setChildParentRelationship(sObjChildList, sObjParentList, relationshipName) link a list of child sObject instances to a list of parent sObject instances for a given relationship name Signature @TestVisible private void setChildParentRelationship(List<SObject> sObjChildList, List<SObject> sObjParentList, String relationshipName) Parameters sObjChildList Type: List<SObject> (List<SObject>): list of child sObject instances sObjParentList Type: List<SObject> (List<SObject>): list of parent sObject instances relationshipName Type: String (String): relationship name that links the child sObject to the parent sObject setRelationship(index, fullyQualifiedRelationshipName, sObj) set or add a related sObject into the related sObject map list for a given index and relationship name Signature public void setRelationship(Integer index, String fullyQualifiedRelationshipName, SObject sObj) Parameters index Type: Integer (Integer): index for which the sObject instance will be added or set fullyQualifiedRelationshipName Type: String (String): fully qualified relationship name for which the sObject instance will be added or set sObj Type: SObject (SObject): sObject instance to add or set to the related sObject map list setSObject(index, sObj) set or add an sObject to the main sObject list for a given index Signature public void setSObject(Integer index, SObject sObj) Parameters index Type: Integer (Integer): index for which the sObject instance will be added or set sObj Type: SObject (SObject): sObject instance to add or set to the main sObject list TestDataFactory.TestDataFactoryException Test Data Factory Exception Signature public class TestDataFactoryException extends Exception"
    },
    {
        "title": "TestDataFactoryUtility",
        "fileName": "TestDataFactoryUtility.html",
        "text": "TestDataFactoryUtility : Test data factory utility for creating Contact, Case, Trip, Flight, Ticket Signature public class TestDataFactoryUtility Author : Manigandan Dhamodaran @last modified on  : 09-26-2025 TestDataFactoryUtility Methods createContact(exampleContact, doInsert, additionalFields) createFlight(startDateTime, doInsert, additionalFields) createTicket(flight, doInsert, additionalFields) createTicketsForFlight(flight, count, additionalFields) createTrip(contact, preferredStart, doInsert, additionalFields) createTripCase(contact, doInsert, additionalFields) createContact(exampleContact, doInsert, additionalFields) Signature public static Contact createContact(Contact exampleContact, Boolean doInsert, Map<String, Object> additionalFields) createFlight(startDateTime, doInsert, additionalFields) Signature public static Flight__c createFlight(DateTime startDateTime, Boolean doInsert, Map<String, Object> additionalFields) createTicket(flight, doInsert, additionalFields) Signature public static Ticket__c createTicket(Flight__c flight, Boolean doInsert, Map<String, Object> additionalFields) createTicketsForFlight(flight, count, additionalFields) Signature public static List<Ticket__c> createTicketsForFlight(Flight__c flight, Integer count, Map<String, Object> additionalFields) createTrip(contact, preferredStart, doInsert, additionalFields) Signature public static Trip__c createTrip(Contact contact, Date preferredStart, Boolean doInsert, Map<String, Object> additionalFields) createTripCase(contact, doInsert, additionalFields) Signature public static Case createTripCase(Contact contact, Boolean doInsert, Map<String, Object> additionalFields)"
    },
    {
        "title": "TicketBookingCallout",
        "fileName": "TicketBookingCallout.html",
        "text": "TicketBookingCallout : Signature public with sharing class TicketBookingCallout extends RestCalloutBase Author : Manigandan Dhamodaran TicketBookingCallout Constructors TicketBookingCallout() TicketBookingCallout() Signature public TicketBookingCallout() TicketBookingCallout Methods bookTicket(requestBody) bookTicket(requestBody) Signature public BookingResult bookTicket(String requestBody) TicketBookingCallout.BookingResult Signature public class BookingResult TicketBookingCallout.BookingResult Properties Name Signature resultMessage public String resultMessage resultStatus public Integer resultStatus statusBoolean public Boolean statusBoolean"
    },
    {
        "title": "TriggerHandler",
        "fileName": "TriggerHandler.html",
        "text": "TriggerHandler : Signature public virtual class TriggerHandler Author : Manigandan Dhamodaran TriggerHandler Properties Name Signature Annotations bypassedHandlers private static Set<String> bypassedHandlers context private TriggerContext context @TestVisible isTriggerExecuting private Boolean isTriggerExecuting @TestVisible loopCountMap private static Map<String, LoopCount> loopCountMap Enums Name Signature Values TriggerContext private enum TriggerContext BEFORE_INSERT, BEFORE_UPDATE, BEFORE_DELETE, AFTER_INSERT, AFTER_UPDATE, AFTER_DELETE, AFTER_UNDELETE TriggerHandler Constructors TriggerHandler() TriggerHandler() Signature public TriggerHandler() TriggerHandler Methods addToLoopCount() afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() context methods beforeUpdate() bypass(handlerName) public static methods clearAllBypasses() clearBypass(handlerName) clearMaxLoopCount() getHandlerName() isBypassed(handlerName) run() public instance methods setMaxLoopCount(max) setTriggerContext() private instancemethods setTriggerContext(ctx, testMode) validateRun() addToLoopCount() Signature @TestVisible private void addToLoopCount() afterDelete() Signature @TestVisible protected virtual void afterDelete() afterInsert() Signature @TestVisible protected virtual void afterInsert() afterUndelete() Signature @TestVisible protected virtual void afterUndelete() afterUpdate() Signature @TestVisible protected virtual void afterUpdate() beforeDelete() Signature @TestVisible protected virtual void beforeDelete() beforeInsert() context methods Signature @TestVisible protected virtual void beforeInsert() beforeUpdate() Signature @TestVisible protected virtual void beforeUpdate() bypass(handlerName) public static methods Signature public static void bypass(String handlerName) clearAllBypasses() Signature public static void clearAllBypasses() clearBypass(handlerName) Signature public static void clearBypass(String handlerName) clearMaxLoopCount() Signature public void clearMaxLoopCount() getHandlerName() Signature @TestVisible private String getHandlerName() isBypassed(handlerName) Signature public static Boolean isBypassed(String handlerName) run() public instance methods Signature public void run() setMaxLoopCount(max) Signature public void setMaxLoopCount(Integer max) setTriggerContext() private instancemethods Signature @TestVisible private void setTriggerContext() setTriggerContext(ctx, testMode) Signature @TestVisible private void setTriggerContext(String ctx, Boolean testMode) validateRun() Signature @TestVisible private Boolean validateRun() TriggerHandler.LoopCount inner classes Signature @TestVisible private class LoopCount TriggerHandler.LoopCount Properties Name Signature count private Integer count max private Integer max TriggerHandler.LoopCount Constructors LoopCount() LoopCount(max) LoopCount() Signature public LoopCount() LoopCount(max) Signature public LoopCount(Integer max) TriggerHandler.LoopCount Methods exceeded() getCount() getMax() increment() setMax(max) exceeded() Signature public Boolean exceeded() getCount() Signature public Integer getCount() getMax() Signature public Integer getMax() increment() Signature public Boolean increment() setMax(max) Signature public void setMax(Integer max) TriggerHandler.TriggerHandlerException Signature public class TriggerHandlerException extends Exception"
    },
    {
        "title": "TripTriggerHandler",
        "fileName": "TripTriggerHandler.html",
        "text": "TripTriggerHandler : Signature public with sharing class TripTriggerHandler extends TriggerHandler Author : Manigandan Dhamodaran TripTriggerHandler Properties Name Signature newTripMap private Map<Id, Trip__c> newTripMap oldTripMap private Map<Id, Trip__c> oldTripMap TripTriggerHandler Constructors TripTriggerHandler() TripTriggerHandler() Signature public TripTriggerHandler() TripTriggerHandler Methods afterUpdate() afterUpdate() Signature public override void afterUpdate()"
    }
];
